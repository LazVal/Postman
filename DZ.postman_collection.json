{
	"info": {
		"_postman_id": "892da192-812b-4dbb-bf78-86a782d16d38",
		"name": "DZ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26779186",
		"_collection_link": "https://www.postman.com/science-participant-46812437/workspace/my-workspace/collection/26779186-892da192-812b-4dbb-bf78-86a782d16d38?action=share&creator=26779186&source=collection_link"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/get_method?name={{name}}&age={{age}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_1?name={{name}}&age={{age}}&weight={{weight}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "weight",
									"value": "{{weight}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Chek_string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!ss\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.\r",
									"let resp_json = pm.response.json()\r",
									"//Спарсить request.\r",
									"let req_f = request.data\r",
									"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Name is equal\", function() {\r",
									"    pm.expect(resp_json.name).to.eql(\"Lena\")\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Age is equal\", function() {\r",
									"    pm.expect(+resp_json.age).to.eql(30)\r",
									"});\r",
									"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Salary is equal\", function() {\r",
									"    pm.expect(resp_json.salary).to.eql(250)\r",
									"}) ;   \r",
									" //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									" pm.test(\"Name_resp = Name_req\", function() {\r",
									"    pm.expect(resp_json.name).to.eql(req_f.name)\r",
									"}) ;\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									" pm.test(\"Age_resp = Age_req\", function() {\r",
									"    pm.expect(+resp_json.age).to.eql(+req_f.age)\r",
									"}) ;\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Salary_resp = Salary_req\", function(){\r",
									"    pm.expect(+resp_json.salary).to.eql(+req_f.salary)\r",
									"});\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(resp_json.family)\r",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"u_salary_1_5_year = Salary_req*4\", function(){\r",
									"    pm.expect(+resp_json.family.u_salary_1_5_year).to.eql(+req_f.salary*4)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.\r",
									"let resp_json = pm.response.json()\r",
									"//Спарсить request.\r",
									"let req_param = pm.request.url.query.toObject()\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Name_resp=Name=req\", function(){\r",
									"    pm.expect(resp_json.name).to.eql(req_param.name)\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Age_resp=Age_req\", function(){\r",
									"    pm.expect(+resp_json.age).to.eql(+req_param.age)\r",
									"});\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Salary_resp=Salary_req\", function(){\r",
									"    pm.expect(+resp_json.salary).to.eql(+req_param.salary)\r",
									"});\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(resp_json.family)\r",
									"//Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Dog have a name\", function(){\r",
									"    pm.expect(resp_json.family.pets.dog).to.have.property('name')\r",
									"});\r",
									"//Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Dog have an age\", function(){\r",
									"    pm.expect(resp_json.family.pets.dog).to.have.property('age')\r",
									"});\r",
									"// Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Dog_name is equal Lucky\", function(){\r",
									"    pm.expect(resp_json.family.pets.dog.name).to.eql('Luky')\r",
									"});\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Age_dog = 4\", function(){\r",
									"    pm.expect(+resp_json.family.pets.dog.age).to.eql(4)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.\r",
									"let resp_json = pm.response.json()\r",
									"//Спарсить request.\r",
									"let req_param = pm.request.url.query.toObject()\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Name_resp=Name_req\", function(){\r",
									"    pm.expect(resp_json.name).to.eql(req_param.name)\r",
									"});\r",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"Age_resp=Agee_req\", function(){\r",
									"    pm.expect(+resp_json.age).to.eql(+req_param.age)\r",
									"});\r",
									"//Вывести в консоль параметр salary из request.\r",
									"console.log(req_param.salary)\r",
									"//Вывести в консоль параметр salary из response.\r",
									"console.log(resp_json.salary)\r",
									"//Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(resp_json.salary[0])\r",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(resp_json.salary[1])\r",
									"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(resp_json.salary[2])\r",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Salary_resp[0]=Salary_req\", function(){\r",
									"    pm.expect(+resp_json.salary[0]).to.eql(+req_param.salary)\r",
									"});\r",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Salary_resp[1]=Salary_req\", function(){\r",
									"    pm.expect(+resp_json.salary[1]).to.eql(+req_param.salary*2)\r",
									"});\r",
									"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"Salary_resp[2]=Salary_req\", function(){\r",
									"    pm.expect(+resp_json.salary[2]).to.eql(+req_param.salary*3)\r",
									"});\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"for (var i = 0; i<resp_json.salary.length;i++){\r",
									"    console.log(\"salary= \" +resp_json.salary[i]);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.\r",
									"let resp_json=pm.response.json()\r",
									"//Спарсить request.\r",
									"let req_f=request.data\r",
									"console.log(req_f)\r",
									"//Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"Response have a start_qa_salary\", function(){\r",
									"    pm.expect(resp_json).to.have.property('start_qa_salary')\r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"Response have a qa_salary_after_6_months\", function(){\r",
									"    pm.expect(resp_json).to.have.property('qa_salary_after_6_months')\r",
									"});\r",
									"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"Response have a qa_salary_after_12_months\", function(){\r",
									"    pm.expect(resp_json).to.have.property('qa_salary_after_12_months')\r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"Response have a qa_salary_after_1.5_year\", function(){\r",
									"    pm.expect(resp_json).to.have.property('qa_salary_after_1.5_year')\r",
									"});\r",
									"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"Response have a qa_salary_after_3.5_years\", function(){\r",
									"    pm.expect(resp_json).to.have.property('qa_salary_after_3.5_years')\r",
									"});\r",
									"//Проверить, что json response имеет параметр person\r",
									"pm.test(\"Response have a property person\", function(){\r",
									"    pm.expect(resp_json).to.have.property('person')\r",
									"});\r",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"resp_json_start_qa_salary = req_f_salary\", function(){\r",
									"    pm.expect(+resp_json.start_qa_salary).to.eql(+req_f.salary)\r",
									"});\r",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"resp_json_qa_salary_after_6_months = req_f_qa_salary*2\", function(){\r",
									"    pm.expect(+resp_json.qa_salary_after_6_months).to.eql(+req_f.salary*2)\r",
									"});\r",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"resp_json_qa_salary_after_12_months = req_f_qa_salary*2.7\", function(){\r",
									"    pm.expect(+resp_json.qa_salary_after_12_months).to.eql(+req_f.salary*2.7)\r",
									"});\r",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"//pm.test(\"resp_json_qa_salary_after_1.5_year = req_f_qa_salary*3.3\", function(){\r",
									"   // pm.expect(+resp_json.qa_salary_after_1.5_year).to.eql(+req_f.salary*3.3)\r",
									"//});\r",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"\r",
									"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"resp_json_person.u_name[1] = salary\", function(){\r",
									"    pm.expect(+resp_json.person.u_name[1]).to.eql(+req_f.salary)\r",
									"});\r",
									" //Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"resp_json_person.u_name[1] = salary\", function(){\r",
									"    pm.expect(+resp_json.person.u_age).to.eql(+req_f.age)\r",
									"});\r",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"resp_json_person.u_name[1] = salary\", function(){\r",
									"    pm.expect(+resp_json.person.u_salary_5_years).to.eql(+req_f.salary*4.2)\r",
									"});\r",
									"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"for(var i = 0 in resp_json.person){\r",
									"    console.log(\"person: \"+resp_json.person[i]);\r",
									"}\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка + значения из параметра person.\r",
									"for (var key of Object.keys(resp_json.person)) {\r",
									"    console.log(key + \" -> \" + resp_json.person[key])\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_3",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"token = pm.response.json().token\r",
									"pm.environment.set(\"token\", token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"login\": \"Lera\",\r\n\"password\":\"123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login\n",
							"host": [
								"{{url}}"
							],
							"path": [
								"login\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let resp_json = pm.response.json();\r",
									"let req_raw_json = JSON.parse(pm.request.body.raw);\r",
									"console.log(req_raw_json);\r",
									"// Проверка структуры json в ответе.\r",
									"pm.test(\"Resp is JSON\", function(){\r",
									"    pm.response.to.be.json\r",
									"});\r",
									"let  schema = {\r",
									"    \"type\":\"object\",\r",
									"    \"properties\":{\r",
									"        \"person\":{\r",
									"            \"type\":\"object\",\r",
									"            \"properties\":{\r",
									"                 \"u_age\":{\r",
									"                    \"type\":\"integer\",\r",
									"                },\r",
									"                \"u_name\":{\r",
									"                    \"type\":\"array\",\r",
									"                },\r",
									"                \"u_salary_1_5_year\":{\r",
									"                    \"type\":\"integer\",\r",
									"                },\r",
									"        },\r",
									"        \"required\":[\"u_age\",\"u_name\", \"u_salary_1_5_year\"]\r",
									"        },\r",
									"        \"qa_salary_after_12_months\":{\r",
									"            \"type:\":\"number\"\r",
									"        },\r",
									"         \"qa_salary_after_6_months\":{\r",
									"            \"type:\":\"number\"\r",
									"        },\r",
									"         \"start_qa_salary\":{\r",
									"            \"type:\":\"number\"\r",
									"        },\r",
									"\r",
									"    },\r",
									"    \"required\":[\"person\",\"qa_salary_after_12_months\", \"qa_salary_after_6_months\",\"start_qa_salary\"]\r",
									"    \r",
									"};\r",
									"tv4.setErrorReporter(function(error) {\r",
									"    return \"Error in here: \" + error.resp_jsonPath + \"in schema \"\r",
									"    + error.schemaPath;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that all values are correct\", function(){\r",
									"    var res = (tv4.validateMultiple(resp_json, schema, false, true));\r",
									"    if(!res.valid){\r",
									"        for(const error of res.errors){\r",
									"            console.log(\"Validation failed\", error)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(res.valid).to.be.true;\r",
									"});\r",
									"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"salary_after_1_5_years = req_raw_json.salary*4\", function(){\r",
									"    pm.expect(resp_json.person.u_salary_1_5_year).to.eql(req_raw_json.salary*4)\r",
									"});\r",
									"pm.test(\"qa_salary_after_12_months = req_raw_json.salary*2.9\", function(){\r",
									"    pm.expect(resp_json.qa_salary_after_12_months).to.eql(req_raw_json.salary*2.9)\r",
									"});\r",
									"pm.test(\"qa_salary_after_6_months = req_raw_json.salary*2\", function(){\r",
									"    pm.expect(resp_json.qa_salary_after_6_months).to.eql(req_raw_json.salary*2)\r",
									"});\r",
									"pm.test(\"qa_start_qa_salary = req_raw_json.salary\", function(){\r",
									"    pm.expect(resp_json.start_qa_salary).to.eql(req_raw_json.salary)\r",
									"});\r",
									"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"let u_salary_1_5_year = resp_json.person.u_salary_1_5_year;\r",
									"pm.environment.set(\"u_salary_1_5_year\", u_salary_1_5_year);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"age\": {{age}},\r\n\"salary\": {{salary}},\r\n\"name\": \"{{name}}\",\r\n\"auth_token\":\"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let req_f = request.data\r",
									"let resp_f = pm.response.json();\r",
									"\r",
									"let req_age = +req_f.age\r",
									"let resp_age = +resp_f.age\r",
									"\r",
									"let req_salary = +req_f.salary\r",
									"let resp_salary_1_5_years = resp_f.family.u_salary_1_5_year\r",
									"\r",
									"let children_2_name = resp_f.family.children[1][0]\r",
									"console.log(children_2_name)\r",
									"\r",
									"console.log(req_f)\r",
									"console.log(\"req_age =\" + req_age)\r",
									"console.log(\"resp_age=\" + resp_age)\r",
									"\r",
									"console.log(\"resp_age=\" + typeof resp_age)\r",
									"\r",
									"pm.test(\"Chek_age\", function () {\r",
									"    pm.expect(req_age).to.eql(resp_age);\r",
									"});\r",
									"\r",
									"pm.test(\"Chek_salary_1_5_yesr\", function () {\r",
									"    pm.expect(req_salary * 4).to.eql(resp_salary_1_5_years);\r",
									"});\r",
									"\r",
									"pm.test(\"children_2_name\", function () {\r",
									"    pm.expect(children_2_name).to.eql(\"Kate\");\r",
									"});\r",
									"pm.test(\"name_type\", function () {\r",
									"    pm.expect(resp_f.name).to.eql(\"Kate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "New_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let resp_json = pm.response.json();\r",
									"let req_data = request.data;\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test(\"Resp is JSON\", function(){\r",
									"    pm.response.to.be.json\r",
									"});\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"        \"age\":{\r",
									"            \"type\":\"integer\",\r",
									"        },\r",
									"        \"name\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"        \"salary\":{\r",
									"            \"type\":\"array\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"age\",\"name\",\"salary\"]\r",
									"};\r",
									"\r",
									"tv4.setErrorReporter(function(error) {\r",
									"    return \"Error in here: \" + error.resp_jsonPath + \"in schema \"\r",
									"    + error.schemaPath;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that all values are correct\", function(){\r",
									"    var res = (tv4.validateMultiple(resp_json, schema, false, true));\r",
									"    if(!res.valid){\r",
									"        for(const error of res.errors){\r",
									"            console.log(\"Validation failed\", error)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(res.valid).to.be.true;\r",
									"});\r",
									"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"Salary_resp=salary\", function () {\r",
									"    pm.expect(+resp_json.salary[0]).to.eql(+req_data.salary);\r",
									"});\r",
									"pm.test(\"Salary_resp=salary_req*2\", function () {\r",
									"    pm.expect(+resp_json.salary[1]).to.eql(req_data.salary*2);\r",
									"});\r",
									"pm.test(\"Salary_resp=salary_req*3\", function () {\r",
									"    pm.expect(+resp_json.salary[2]).to.eql(req_data.salary*3);\r",
									"});\r",
									"//проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test(\"Salary_resp[2]>Salary_resp[0]\", function(){\r",
									"    pm.expect(+resp_json.salary[2]).to.be.above(+resp_json.salary[0])\r",
									"});\r",
									"pm.test(\"Salary_resp[2]>Salary_resp[1]\", function(){\r",
									"    pm.expect(+resp_json.salary[2]).to.be.above(+resp_json.salary[1])\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let resp_json = pm.response.json();\r",
									"let req_data = request.data;\r",
									"pm.test(\"Resp is JSON\", function(){\r",
									"    pm.resp_json.to.be.json\r",
									"});\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test(\"Check age is a number\", function () {\r",
									"     pm.expect(typeof resp_json.age).to.equal(\"number\");\r",
									"});\r",
									"pm.test(\"Check daily_food is a number\", function () {\r",
									"     pm.expect(typeof resp_json.daily_food).to.equal(\"number\");\r",
									"});\r",
									"pm.test(\"Check daily_sleep is a number\", function () {\r",
									"     pm.expect(typeof resp_json.daily_sleep).to.equal(\"number\");\r",
									"});\r",
									"pm.test(\"Check name is a string\", function () {\r",
									"     pm.expect(typeof resp_json.name).to.equal(\"string\");\r",
									"});\r",
									"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"resp_json_daily_food = req_data.weight*0.012\", function () {\r",
									"    pm.expect(resp_json.daily_food).to.eql(req_data.weight*0.012);\r",
									"});\r",
									"pm.test(\"resp_json_daily_sleep = req_data.weight*2.5\", function () {\r",
									"    pm.expect(resp_json.daily_sleep).to.eql(req_data.weight*2.5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "{{weight}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/test_pet_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let resp_json = pm.response.json();\r",
									"let req_data = request.data;\r",
									"pm.test(\"Resp is JSON\", function(){\r",
									"    pm.response.to.be.json\r",
									"});\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test(\"resp_json.age is a string\", function () {\r",
									"    pm.expect(typeof resp_json.age).to.eql(\"string\");\r",
									"});\r",
									"pm.test(\"resp_json.family is a objeck\", function () {\r",
									"    pm.expect(typeof resp_json.family).to.eql(\"object\");\r",
									"});\r",
									"//Почему children это объект??? \r",
									"console.log(typeof resp_json.family.children);\r",
									"pm.test(\"resp_json.children is a array\", function () {\r",
									"    pm.expect(typeof resp_json.family.children).to.eql(\"object\");\r",
									"});\r",
									"pm.test(\"resp_json.children[0][0] is Alex\", function () {\r",
									"    pm.expect(resp_json.family.children[0][0]).to.eql(\"Alex\");\r",
									"});\r",
									"pm.test(\"resp_json.children[0][1] is a 24\", function () {\r",
									"    pm.expect(resp_json.family.children[0][1]).to.eql(24);\r",
									"});\r",
									"pm.test(\"resp_json.children[1][0] is Kate\", function () {\r",
									"    pm.expect(resp_json.family.children[1][0]).to.eql(\"Kate\");\r",
									"});\r",
									"pm.test(\"resp_json.children[1][1] is 12\", function () {\r",
									"    pm.expect(resp_json.family.children[1][1]).to.eql(12);\r",
									"});\r",
									"pm.test(\"properties_family\", function () {\r",
									"    pm.expect(resp_json.family).to.have.all.keys(\"children\",\"u_salary_1_5_year\");\r",
									"});\r",
									"//Проверить что занчение поля name = значению переменной name из окружения\r",
									"pm.test(\"resp_json_name=environment_name\", function () {\r",
									"    pm.expect(resp_json.name).to.eql(environment.name);\r",
									"});\r",
									"//Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"pm.test(\"resp_json_age=req_data.age\", function () {\r",
									"    pm.expect(resp_json.age).to.eql(req_data.age);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{u_salary_1_5_year}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_test_user",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"resp_json = pm.response.json();\r",
									"let number = Math.ceil(Math.random()*resp_json.length);\r",
									"let object = resp_json[number];\r",
									"console.log(object)\r",
									"pm.environment.set(\"Cur_ID\", object.Cur_ID);\r",
									"console.log(object.Cur_ID)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"resp_json=pm.response.json();\r",
									"req_data=request.data;\r",
									"let schema = {\r",
									"    \"type\":\"object\",\r",
									"    \"properties\":{\r",
									"        \"Cur_Abbreviation\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"        \"Cur_ID\":{\r",
									"            \"type\":\"integer\"\r",
									"        },\r",
									"        \"Cur_Name\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"        \"Cur_OfficialRate\":{\r",
									"            \"type\":\"number\"\r",
									"        },\r",
									"        \"Cur_Scale\":{\r",
									"            \"type\":\"integer\"\r",
									"        },\r",
									"        \"Date\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"    },\r",
									"    \"required\":[\"Cur_Abbreviation\",\"Cur_ID\",\"Cur_Name\",\"Cur_OfficialRate\",\"Cur_Scale\",\"Date\"]\r",
									"};\r",
									"pm.test('Schema is valid', function(){\r",
									"\tpm.expect(tv4.validate(resp_json, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// 1) получить список валют\r",
									"let cur_id = pm.environment.get(\"Cur_ID\");\r",
									"let token = pm.environment.get(\"token\");\r",
									"\r",
									"// const echoPostRequest={\r",
									"//     url:\"http://54.157.99.22:80/curr_byn\",\r",
									"//     method:\"POST\",\r",
									"//     header: \"Content-Type': 'application/json\",\r",
									"//     body:{\r",
									"//         mode:\"formdata\",\r",
									"//         formdata:\r",
									"//         [{key:'auth_token',token}]\r",
									"//     }\r",
									"// };\r",
									"// pm.sendRequest(\"echoPostRequest\", function (err, response) {\r",
									"//     console.log(response.json());\r",
									"// });\r",
									"\r",
									"// // for (let i=0; i<resp_json.length; i++){\r",
									"// //     cur_id=resp_json[i].Cur_ID\r",
									"// //     console.log(cur_id)\r",
									"// // }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "Lena",
			"type": "string",
			"disabled": true
		},
		{
			"key": "age",
			"value": "30",
			"type": "string",
			"disabled": true
		},
		{
			"key": "salary",
			"value": "250",
			"type": "string",
			"disabled": true
		},
		{
			"key": "weight",
			"value": "50",
			"type": "string",
			"disabled": true
		},
		{
			"key": "token",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"value": "",
			"type": "string"
		}
	]
}